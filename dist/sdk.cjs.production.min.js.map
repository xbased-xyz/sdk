{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  SEPOLIA = 11155111,\n  BASE = 8453\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\n// TODO: FACTORY_ADDRESS\nexport const FACTORY_ADDRESS = {\n  [ChainId.SEPOLIA]: \"0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32\",\n  [ChainId.BASE]: \"0xC3550497E591Ac6ed7a7E03ffC711CfB7412E57F\",\n}\n\nexport const INIT_CODE_HASH = '0ac14d834b4c80f5eeb7e01253f963e55ab38ac98196e2e57ebac13e2afc9fd6'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import { Currency } from './currency'\nimport invariant from 'tiny-invariant'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    const equivalent = this.chainId === other.chainId && this.address === other.address\n    if (equivalent) {\n      // reference the same token, must have the same decimals/symbol/name\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equivalent\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.SEPOLIA]: new Token(ChainId.SEPOLIA, '0x30B2F2E0359B61D812F4a1860EEEaCc5b513FB64', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.BASE]: new Token(ChainId.BASE, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n  constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n// returns the percent difference between the mid price and the execution price\n// we call this price impact in the UI\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: CurrencyAmount\n  public readonly outputAmount: CurrencyAmount\n  // the price expressed in terms of output/input\n  public readonly executionPrice: Price\n  // the mid price after the trade executes assuming zero slippage\n  public readonly nextMidPrice: Price\n  // the percent difference between the mid price before the trade and the price after the trade\n  public readonly priceImpact: Percent\n\n  // this is a misnomer for price impact, but kept for compatibility\n  public get slippage(): Percent {\n    return this.priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\nexport interface TradeOptions {\n  // how much the execution price is allowed to move unfavorably from the trade execution price\n  allowedSlippage: Percent\n  // how long the swap is valid until it expires, in seconds\n  // this will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n  // are generated.\n  ttl: number\n  // the account that should receive the output of the swap\n  recipient: string\n\n  // whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n  feeOnTransfer?: boolean\n}\n\nexport interface SwapParameters {\n  // the method to call on the Uniswap V2 Router\n  methodName: string\n  // the arguments to pass to the method, all hex encoded\n  args: (string | string[])[]\n  // the amount of wei to send in hex\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","_FACTORY_ADDRESS","SEPOLIA","BASE","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","this","ETHER","CACHE","_CACHE","MAINNET","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","Token","_Currency","chainId","fetchData","provider","parsedDecimals","undefined","getDefaultProvider","getNetwork","_temp","_CACHE2","_CACHE2$chainId","Promise","resolve","_temp2","Contract","ERC20","then","_extends","_extends3","_CACHE3","_extends2","e","reject","_proto","equals","other","equivalent","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_CACHE$tokens$0$addre","getCreate2Address","keccak256","pack","IUniswapV2Pair","abi","getReserves","_ref","reserves0","reserves1","balances","involvesToken","token0","token1","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","_step","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","done","_step$value","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}