{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  SEPOLIA = 11155111,\n  BASE = 8453\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\n// TODO: FACTORY_ADDRESS\nexport const FACTORY_ADDRESS = {\n  [ChainId.SEPOLIA]: \"0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32\",\n  [ChainId.BASE]: \"0xC3550497E591Ac6ed7a7E03ffC711CfB7412E57F\",\n}\n\nexport const INIT_CODE_HASH = '0ac14d834b4c80f5eeb7e01253f963e55ab38ac98196e2e57ebac13e2afc9fd6'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import { Currency } from './currency'\nimport invariant from 'tiny-invariant'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    const equivalent = this.chainId === other.chainId && this.address === other.address\n    if (equivalent) {\n      // reference the same token, must have the same decimals/symbol/name\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equivalent\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.SEPOLIA]: new Token(ChainId.SEPOLIA, '0x30B2F2E0359B61D812F4a1860EEEaCc5b513FB64', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.BASE]: new Token(ChainId.BASE, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n  constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n// returns the percent difference between the mid price and the execution price\n// we call this price impact in the UI\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: CurrencyAmount\n  public readonly outputAmount: CurrencyAmount\n  // the price expressed in terms of output/input\n  public readonly executionPrice: Price\n  // the mid price after the trade executes assuming zero slippage\n  public readonly nextMidPrice: Price\n  // the percent difference between the mid price before the trade and the price after the trade\n  public readonly priceImpact: Percent\n\n  // this is a misnomer for price impact, but kept for compatibility\n  public get slippage(): Percent {\n    return this.priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\nexport interface TradeOptions {\n  // how much the execution price is allowed to move unfavorably from the trade execution price\n  allowedSlippage: Percent\n  // how long the swap is valid until it expires, in seconds\n  // this will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n  // are generated.\n  ttl: number\n  // the account that should receive the output of the swap\n  recipient: string\n\n  // whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n  feeOnTransfer?: boolean\n}\n\nexport interface SwapParameters {\n  // the method to call on the Uniswap V2 Router\n  methodName: string\n  // the arguments to pass to the method, all hex encoded\n  args: (string | string[])[]\n  // the amount of wei to send in hex\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","_FACTORY_ADDRESS","SEPOLIA","BASE","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","process","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","CACHE","_CACHE","MAINNET","Token","_Currency","chainId","fetchData","provider","parsedDecimals","undefined","getDefaultProvider","getNetwork","_temp","_CACHE2","_CACHE2$chainId","Promise","resolve","_temp2","Contract","ERC20","then","_extends","_extends3","_CACHE3","_extends2","e","reject","_proto","equals","other","equivalent","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_CACHE$tokens$0$addre","getCreate2Address","keccak256","pack","IUniswapV2Pair","abi","getReserves","_ref","reserves0","reserves1","balances","involvesToken","token0","token1","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","_step","done","_step$value","i","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}